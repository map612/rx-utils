apply plugin: 'java'
apply plugin: 'application'
apply plugin: "sonar-runner"

//apply from: 'dependencies.gradle'

sourceCompatibility = 1.8

//删除父目录下的test，避免test task执行失败
delete "${buildDir}/classes/test"
mainClassName = ' '

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
//        classpath 'org.gradle.api.plugins:gradle-nexus-plugin:0.4'
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1+'
    }
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

//tasks.withType(Compile) {
//    options.encoding = "UTF-8"
//}

project.configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, 'seconds'
        resolutionRules.with {
            eachModule({ moduleResolve ->
                if (moduleResolve.request.version.endsWith('-SNAPSHOT')) {
                    // This will cause the dependency to be refreshed once per build execution
                    moduleResolve.cacheFor(0, SECONDS)
                    // This would cause the dependency to be refreshed once per sub-project in a multi-project build. You wouldn't normally want that.
                    // moduleResolve.refresh()
                }
            } as Action)
            eachArtifact({ artifactResolve ->
                if (artifactResolve.request.moduleVersionIdentifier.version.endsWith('-SNAPSHOT')) {
                    artifactResolve.cacheFor(0, SECONDS)
                }
            } as Action)
        }
    }
}

/** 此闭包内的声明子类皆可使用 */
allprojects {
    group = 'cn.rxframework.utils'
    version = '0.0.8-SNAPSHOT'

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'maven-publish-auth'

    repositories {
        mavenLocal()
//        repositories { maven { url 'http://repo.rx.cn/content/groups/public/' } }
        mavenCentral()
    }

    publishing {
        task sourceJar(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        publications {
            mavenJava(MavenPublication) { from components.java }
            mavenJava(MavenPublication) {
                artifact(sourceJar) {
                    classifier = "sources"
                }
            }
        }

//        repositories {
//            maven {
//                name = 'rx'
//                url "http://repo.rx.cn/content/repositories/${project.version.endsWith('-SNAPSHOT') ? 'snapshots' : 'releases'}"
//            }
//        }
    }
}

//拷贝根目录下的所有test到各自子module下
task "copytest" << {
    def fromPath
    def toPath
    subprojects.each {
        fromPath = "${project.buildDir}/classes/test/${it.name}"
        toPath = "${it.buildDir}/classes/test"

        copy {
            from fromPath
            into toPath
        }
    }
}

task createREADME() {
    file("README.md").createNewFile()
}

subprojects {
    task "createJavaProject" << {
        sourceSets*.java.srcDirs*.each { it.mkdirs() }
        sourceSets*.resources.srcDirs*.each { it.mkdirs() }

        /** 可选生成子文件夹 */
//        file("src/main/filters").mkdirs()
//        file("src/main/assembly").mkdirs()
//        file("src/main/config").mkdirs()
//        file("src/main/scripts").mkdirs()

        /** 填充文件，便于git提交 */
        file("src/main/java/cn/rxframework/utils").mkdirs()
        file("src/main/java/cn/rxframework/utils/package-info.java").createNewFile()
        file("src/main/resources").mkdirs()
        file("src/main/resources/spring.xml").createNewFile()

        file("src/test/java/cn/rxframework/utils").mkdirs()
        file("src/test/java/cn/rxframework/utils/package-info.java").createNewFile()
        file("src/test/resources/spring.xml").createNewFile()
    }

    /** 有时候会报错，但需要执行 */
//    task createREADME(){
//        file("README.md").createNewFile()
//    }

    configurations {
        provided
        compile.extendsFrom provided

        all*.exclude group: 'org.springframework', module: 'spring'
        all*.exclude group: 'asm', module: 'asm'
        all*.exclude group: 'log4j', module: 'log4j'
        all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    dependencies {
//        compile group: "cn.rx.common", name: "xxx", version: "$rxCommonVersion", changing: true

        testCompile "junit:junit:4.11"
        compile "commons-logging:commons-logging:$apacheCommonsLoggingVersion"
        compile "org.slf4j:slf4j-api:$slf4jVersion"

        // 加载libs目录下所有的jar
        compile fileTree(dir: 'libs', include: ['*.jar'])
    }
}

//configure(subprojects.findAll { it.name.contains('-service') }) {
//    task createServiceProject(dependsOn: 'createJavaProject') << {
//
//        file("src/main/resources/config").mkdirs()
//        file("src/main/resources/config/main-conf.properties").createNewFile()
//        file("src/main/resources/config/metadata.properties").createNewFile()
//    }
//}

configure(subprojects.findAll { it.name.contains('war') }) {
    apply plugin: 'war'
    apply plugin: 'jetty'

//    task createWebProject(dependsOn: 'createJavaProject') << {
//        def webAppDir = file("$webAppDirName")
//        webAppDir.mkdirs()
//
//        file("src/main/resources/config").mkdirs()
//        file("src/main/resources/config/main-conf.properties").createNewFile()
//        file("src/main/resources/config/metadata.properties").createNewFile()
//    }
}